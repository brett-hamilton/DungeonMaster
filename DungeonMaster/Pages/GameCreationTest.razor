@page "/GameCreationTest"

@using DungeonMaster.Data
@using Microsoft.AspNetCore.Components
@using System.IO;
@using System.Text.Json;
<h3>Game Creation Test</h3>
<hr />
<br />



<p>Game Information:</p>
<p>Status: @gameStatus</p>
<p>Current Name: @runningGameName</p>
<p>Rows:    @gameRows</p>
<p>Columns: @gameColumns</p>
<br />
<p>Character List:</p>
<div class="row" style="outline: 0px solid blue; outline-offset: 8px; max-height: 200px; min-height: 100px; width: 500px">
    @* Use overflow-auto and max/min height to force game log to be scrollable and at set size. *@
    <div class="col-10 overflow-auto" style="max-height: 200px; min-height: 100px; width: fit-content">
        <ul class="list-group " id="charList">
            @* Iterate through the list of strings in reverse order, so newest message is at top. Based on Microsoft SignalR example. *@
            @for (int i = (characterList.Count - 1); i >= 0; i--)
            {
                <li class="list-group-item list-group-item-primary">@characterList[i].Name</li>
            }

        </ul>
    </div>
</div>

<br />
<br />
<br />


<div id="GameStarter">
    <label for="gameName">Name: </label>
    <input placeholder="enter game name" @bind="gameName" />
    <br>
    <label for="rows">Rows: </label>
    <input placeholder="enter number of rows" @bind="rows" />
    <br>
    <label for="columns">Columns: </label>
    <input placeholder="enter number of columns" @bind="columns" />
    <br>
    <button class="btn btn-primary" @onclick="StartGame">Create Game</button>;
</div>

<br />
<br />


<div id="CharacterCreator" >
    <label for="characterName">Name:</label>
    <input placeholder="enter character name" @bind="characterName" />
    <label for="characterName">Row:</label>
    <input placeholder="enter character row" @bind="charRow" />
    <label for="characterName">Column:</label>
    <input placeholder="enter character column" @bind="charColumn" />
    <br />
    <button class="btn btn-primary" @onclick="CreateCharacter">Create Character and add to game</button>
</div>

@code {
    private string gameName = string.Empty;
    private int rows = 50;
    private int columns = 50;
    private Game game = null;
    private List<Character> characterList = new List<Character>();
    private string gameStatus = "Not Started";
    private int charRow = 5;
    private int charColumn = 5;
    private int gameRows = 0;
    private int gameColumns = 0;
    private string runningGameName = string.Empty;


    public void StartGame()
    {
        if (game == null)
        {
            game = new Game(rows, columns);
            game.GameName = gameName;
            gameStatus = "Created. Awaiting Characters";
            runningGameName = gameName;
            gameRows = rows;
            gameColumns = columns;
        }
        else
            gameStatus = "Can not start new game, game in progress.";
    }




    /// <summary>
    /// Name of the character bring created
    /// </summary>
    private string characterName = string.Empty;


    /// <summary>
    /// Creates a character with the provided information from form and adds it to the game.
    ///
    /// Created by: Brett Hamilton
    /// Created on: 6/9/2021
    /// </summary>
    public void CreateCharacter()
    {
        Character newCharacter = new Character(characterName, 50, 1);
        if (game != null)
        {
            if (game.AddCharacter(newCharacter, charRow-1, charColumn-1))
            {
                gameStatus = newCharacter.Name + " was added to the game at location (" + (1 + charRow) + ", " + (1 + charColumn) + ")";
                characterList.Add(newCharacter);
            }
            else
                gameStatus = newCharacter.Name + " could not be added to the game...";
        }
        else
            gameStatus = "Characters can not be added until the game is started.";
    }

}

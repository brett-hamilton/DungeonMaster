@using Microsoft.AspNetCore.SignalR.Client
@using DungeonMaster.Data
@inject NavigationManager NavigationManager;
@*
    Based upon the Modals provided by Dr. Roach
    Implementation to hide and show based upon:
    https://stackoverflow.com/questions/59256798/how-to-use-bootstrap-modal-in-blazor-client-app
*@
<div class="modal" id="rollDiceModal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true" style="@modalShowStyling">
    <div class="modal-dialog modal-dialog-centered modal">
        <div id="mainContent" class="modal-content">

            <div class="modal-header">
                <h5 class="modalTitle" id="rollDiceModalTitle">Dice Roller</h5>
            </div>

            <div class="modal-body">
                <div class="row">
                    <label for="dieSides" class="col-4">Sides on Die: </label>
                    <select @bind="DieSides" name="dieSides" id="dieSides" class="col-3">
                        <option value="2">2</option>
                        <option value="4">4</option>
                        <option value="6">6</option>
                        <option value="8">8</option>
                        <option value="10">10</option>
                        <option value="12">12</option>
                        <option value="20">20</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div class="row">
                    <label for="dieToRoll" class="col-4">Number of Die: </label>
                    <select @bind="DieToRoll" name="dieToRoll" id="dieToRoll" class="col-3">
                        <option value="1" selected>1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                    </select>
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn btn-primary" @onclick="RollMultipleDice">Roll!</button>
                <button class="btn btn-primary" @onclick="Roll">QUICK D20 ROLL!</button>
                <button class="btn btn-secondary" @onclick="CloseModal" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code{

    /// <summary>
    /// DieSides and DieToRoll will eventually be communicated to the page the modal is on using SignalR.
    /// </summary>
    public int DieSides { get; set; }
    public int DieToRoll { get; set; }

    /// <summary>
    /// Result to be displayed showing the result of the dice roll.
    /// </summary>
    private string diceResult;

    /// <summary>
    /// String that represents whether the modal should be displayed or not. Modified by the open and close
    /// modal buttons.
    /// </summary>
    public string modalShowStyling { get; set; } = "display:none";

    /// <summary>
    /// Hub connection used to send and receive messages.
    /// </summary>
    private HubConnection hubConnection;

    /// <summary>
    /// Method to initialize our hub connection used to send and receive messages.
    /// When a message is received, it is added to the game log.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/dungeonmasterhub"))
                .Build();

        await hubConnection.StartAsync();
    }
    /// <summary>
    /// Method to report the result to the page holding the modal to display.
    /// </summary>
    /// <returns></returns>
    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", diceResult, "DiceModalTest");

    /// <summary>
    /// Method to change styling to display the Modal.
    /// </summary>
    public void OpenModal()
    {
        modalShowStyling = "display:block";
        StateHasChanged();
    }

    /// <summary>
    /// Method to change the styling to hide the Modal.
    /// </summary>
    public void CloseModal()
    {
        modalShowStyling = "display:none";
        StateHasChanged();
    }

    /// <summary>
    /// Method to roll multiple dice and report the result to the user.
    /// </summary>
    /// <returns></returns>
    public async Task RollMultipleDice()
    {
        // If the roll is successful, report it to the main page.
        try
        {
            var rollReport = Die.Roll(DieSides, DieToRoll);
            diceResult = $"Player rolled {rollReport.GetDiceReport()}";
            CloseModal();
            await Send();
        }
        // If not, null out the result, and output the error to the console.
        catch (Exception e)
        {
            Console.WriteLine(e);
            diceResult = null;
        }
    }

    public async Task Roll()
    {
        var diceTotal = Die.RollD20();
        diceResult = $"Player rolled 1 D20 for {diceTotal}";
        await Send();
    }
}


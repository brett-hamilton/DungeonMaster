@page "/CharacterCreationTest"

@using DungeonMaster.Data
@using Microsoft.AspNetCore.Components
@using System.IO;
@using System.Text.Json;
<h3>Character Creation Test</h3>
<hr />
<br />

<p>Current Name: @displayName</p>

<div id="CharacterCreator">
    <label for="characterName">Name: </label>
    <input placeholder="Enter character name" @bind="characterName" />
    <label for="Character Class">Class: </label>
    <select name="class" @bind="characterClass">
        <option value="ranger">Ranger</option>
        <option value="fighter">Fighter</option>
        <option value="wizard">Wizard</option>
    </select>
    <br />
    <select name="Stat" @bind="currentStatString">
        <option value="default">[select stat]</option>

        @foreach (string s in StatNames)
        {
            <option value="@s">@s</option>
        }


    </select>

    <select name="StatNum" @bind="currentStatValue">
        <option value="default">[select number]</option>
        @foreach (int num in StatNumbers)
        {
            <option value="@num">@num</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="SaveStat">Save Current Stat Point</button>
    <br />
    <br />
    <div>
        Strength: @statsForCharacter.Strength<br />
        Dexterity: @statsForCharacter.Dexterity<br />
        Constitution: @statsForCharacter.Constitution<br />
        Intelligence: @statsForCharacter.Intelligence<br />
        Wisdom: @statsForCharacter.Wisdom<br />
        Charisma: @statsForCharacter.Charisma<br />
    </div>
    <button class="btn btn-primary" @onclick="CreateCharacter">Create and Save Character</button>
    <p>@errorMessage</p>
    <p>Character List:</p>
    <div style="max-height: 200px; min-height: 100px; width: 500px">
        <ul class="list-group" id="charList">
            @foreach (Character character in characterList)
            {
                if (character.Name != string.Empty)
                {
                    <li class="list-group-item list-group-item-primary">@character.Name</li>
                }
        
            }
        </ul>
    </div>
    <br />
    <div>
        <select name="DeleteCharacter" @bind="characterToDelete">
            <option value="default">[select character]</option>
            @foreach (Character character in characterList)
            {
                <option value="@character.Name">@character.Name</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="DeleteCharacter">Delete Character</button>
    </div>
    <br />
    <div>
        <button class="btn btn-primary" @onclick="DeleteAllCharacters">Delete All Characters</button>
    </div>
</div>

@code {
    /// <summary>
    /// Name of the character bring created
    /// </summary>
    private string characterName = string.Empty;

    /// <summary>
    /// Contains error message if error has occurred.
    /// </summary>
    private string errorMessage = string.Empty;

    /// <summary>
    /// Used to display the name while clearing the textbox
    /// </summary>
    private string displayName = string.Empty;

    /// <summary>
    /// Character's class 
    /// </summary>
    private string characterClass = string.Empty;

    /// <summary>
    /// the current value that the user selected
    /// </summary>
    private int currentStatValue = 0;

    /// <summary>
    /// the current string value of the stat the user selected
    /// </summary>
    private string currentStatString = string.Empty;

    /// <summary>
    /// Path to characters file.
    /// </summary>
    private const string PATH = "Saves/characters.json";

    /// <summary>
    /// Name of the character the user wants to delete.
    /// </summary>
    private string characterToDelete = string.Empty;

    /// <summary>
    /// Stats for the character.
    /// </summary>
    private CharacterStats statsForCharacter = new CharacterStats();

    /// <summary>
    /// List of the available numbers for the stats
    /// </summary>
    private List<int> StatNumbers = new List<int>() { 15, 14, 13, 12, 10, 8 };

    /// <summary>
    /// List of the names of the stats
    /// </summary>
    private List<string> StatNames = new List<string>() { "strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma" };

    /// <summary>
    /// List of characters from the characters file.
    /// </summary>
    private List<Character> characterList = new List<Character>();

    /// <summary>
    /// Load characters on start up from characters file. Also prevents the page from crashing in the event the save file is gone or corrupted.
    /// </summary>
    protected override async Task OnInitializedAsync()
    { try
        {
            if (!File.Exists(PATH))
            {

                File.Create(PATH).Dispose(); // Create the File.

            }

            characterList = CharacterFile.Read();

            await Task.Delay(10);
        } catch(IOException)
        {
        }
    }

    /// <summary>
    /// Creates a character with the provided information from form and saves it to JSON file.
    ///
    /// Created by: Brett Hamilton
    /// Created on: 6/9/2021
    /// Edited by Jacob R. Frazier on 06/18/2021
    /// Added the ability to add more than one character.
    /// </summary>
    public void CreateCharacter()
    {

        // Create new character and serialize it as a JSON string and trim white space
        characterName = characterName.Trim();

        Character newCharacter = new Character(characterName, 50, 1);
        newCharacter.CharacterStats = statsForCharacter;

        try
        {   if (newCharacter.Name != string.Empty)
            {
                characterList.Add(newCharacter);
                CharacterFile.Write(newCharacter, false);
                // characterList.Add(newCharacter);
            }




        }
        catch (IOException e)
        {
            errorMessage = "Error Writing to File: " + e.Message;
        }
        catch (Exception e)
        {
            errorMessage = "Error: " + e.Message;
        }

        displayName = characterName;
        //clears TextBox
        characterName = string.Empty;

        ResetStats();
    }

    /// <summary>
    /// Resets character stats to default options.
    /// </summary>
    private void ResetStats()
    {
        statsForCharacter = new CharacterStats();
        StatNumbers = new List<int> ( ) { 15, 14, 13, 12, 10, 8 };
        StatNames = new List<string> ( ) { "strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma" };
        currentStatValue = 0;
        currentStatString = string.Empty;
    }

    /// <summary>
    /// Save the stats number entered in by the player to the appropriate attribute
    /// </summary>
    public void SaveStat()
    {
        //checks if the default value in the drop list was selected by accident
        //will not add, refresh, or remove any variables if true
        bool isDefault = false;

        switch(currentStatString)
        {
            case "strength":
                statsForCharacter.Strength = currentStatValue;
                break;
            case "dexterity":
                statsForCharacter.Dexterity = currentStatValue;
                break;
            case "constitution":
                statsForCharacter.Constitution = currentStatValue;
                break;
            case "intelligence":
                statsForCharacter.Intelligence = currentStatValue;
                break;
            case "wisdom":
                statsForCharacter.Wisdom = currentStatValue;
                break;
            case "charisma":
                statsForCharacter.Charisma = currentStatValue;
                break;
            case "default":
                isDefault = true;
                break;
        }

        if(!isDefault)
        {
            //remove and refresh variables
            StatNumbers.Remove(currentStatValue);
            StatNames.Remove(currentStatString);
            currentStatValue = 0;
            currentStatString = string.Empty;
        }
    }

    /// <summary>
    /// Delete a character from the character list and file.
    /// </summary>
    public void DeleteCharacter()
    {
        bool removed = false;

        foreach (Character character in characterList)
        {
            if (character.Name == characterToDelete)
            {
                characterList.Remove(character);
                removed = true;
                break;
            }
        }

        if (!removed)
        {
            return;                 // Character was not found
        }

        // Write new character list to character file
        CharacterFile.Clear();

        foreach (Character character in characterList)
        {
            CharacterFile.Write(character, false);
        }
    }

    /// <summary>
    /// Clears the characters file.
    /// </summary>
    public void DeleteAllCharacters()
    {
        characterList.Clear();
        CharacterFile.Clear();
        displayName = string.Empty;
    }
}

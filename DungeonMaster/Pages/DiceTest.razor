@page "/DiceTest"

@using DungeonMaster.Data
@using Microsoft.AspNetCore.Components
<h3>Dice Test</h3>
<hr />
<br />

<div class="row" id="DiceDisplay">
    <label class="col-2">Dice Total: </label>
    <input class="col-1" readonly value="@diceTotal" />
</div>

<hr />
<br />
<div id="MultiDiceRoller">
    <label for="dieSides">Sides on Die: </label>
    <select @bind="dieSides" name="dieSides" id="dieSides">
        <option value="2">2</option>
        <option value="4">4</option>
        <option value="6">6</option>
        <option value="8">8</option>
        <option value="10">10</option>
        <option value="12">12</option>
        <option value="20">20</option>
        <option value="100">100</option>
    </select>
    <label for="dieToRoll">Number of Die: </label>
    <select @bind="dieToRoll" name="dieToRoll" id="dieToRoll">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
    </select>
    <div>
        <button class="btn btn-primary" @onclick="@RollMultipleDice">ROLL!</button>
        <button class="btn btn-primary" @onclick="Roll">QUICK D20 ROLL!</button>
    </div>
</div>
<hr />
<br />
<h5>Single D20 With Modifier Test:</h5>
<div id="rollDieWithModifier">
    <label for="modifier">Modifier: </label>
    <select @bind="modifier" name="modifier" id="modifier">
        <option value="">No Modifier</option>
        <option value="a">Advantage</option>
        <option value="d">Disadvantage</option>
    </select>
</div>
<br />

<div>
    <button class="btn btn-primary" @onclick="RollModifier">ROLL D20 WITH MODIFIER!</button>
</div>
<br />
<br />

<div class="row" style="outline: 1px solid blue; outline-offset: 8px; max-height: 200px; min-height: 200px">
    <div style="border-right: 1px solid blue" class="col-2">
        <button class="btn btn-secondary" @onclick="ClearLog">Clear Log</button>
    </div>
    @* Use overflow-auto and max/min height to force game log to be scrollable and at set size. *@
    <div class="col-10 overflow-auto" style="max-height: 200px; min-height: 200px">
        <ul class="list-group" id="gameLog">
            @* Iterate through the list of strings in reverse order, so newest message is at top. Based on Microsoft SignalR example. *@
            @for (int i = (GameLog.Count - 1); i >= 0; i--)
            {
                if (i == (GameLog.Count - 1))
                {
                    <li class="list-group-item list-group-item-primary">@GameLog[i]</li>
                }

                else
                {
                    <li class="list-group-item list-group-item-secondary">@GameLog[i]</li>
                }
            }

        </ul>
    </div>
</div>


@code {
    /// <summary>
    /// Total from dice roll, displayed to user.
    /// </summary>
    private int? diceTotal = null;

    /// <summary>
    /// dieSides and dieToRoll chosen from dropdoby box by user.
    /// </summary>
    protected int dieSides = 4;
    protected int dieToRoll = 1;

    /// <summary>
    /// Modifier chosen from drop down box, to adjust D20 roll.
    /// </summary>
    private string modifier = "";

    /// <summary>
    /// List of previous actions taken.
    /// </summary>
    public List<string> GameLog { get; set; } = new List<string>();

    /// <summary>
    /// Method to roll a single D20 die without modifiers.
    /// </summary>
    private void Roll()
    {
        diceTotal = Die.RollD20();
        GameLog.Add($"Player rolled 1 D20 for {diceTotal}");
    }

    /// <summary>
    /// Method to roll multiple multi-sided dice. The player chooses the number of dice and
    /// sides of dice via a dropdown menu.
    /// </summary>
    private void RollMultipleDice()
    {
        try
        {
            var rollReport = Die.Roll(dieSides, dieToRoll);
            diceTotal = rollReport.GetDiceTotal();
            GameLog.Add($"Player rolled {rollReport.GetDiceReport()}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            diceTotal = null;
        }
    }

    /// <summary>
    /// Method to roll a 20 sided die with advantage, disadvantage, or with no modifier.
    /// Method will update the dice total value.
    /// </summary>
    private void RollModifier()
    {
        if (modifier == "a")
        {
            diceTotal = Die.RollD20Advantage();
            GameLog.Add($"Player rolled 1 D20 for {diceTotal}");
        }

        else if (modifier == "d")
        {
            diceTotal = Die.RollD20Disadvantage();
            GameLog.Add($"Player rolled 1 D20 for {diceTotal}");
        }

        else
        {
            diceTotal = Die.RollD20();
            GameLog.Add($"Player rolled 1 D20 for {diceTotal}");
        }
    }

    private void ClearLog()
    {
        GameLog = new List<string>();
    }
}
